/*
 * This file contains many function pointer types and structures for Windows
 * APIs. Many of these structures are not actually needed for this patcher,
 * but were used in the process of developing it. These types make it easy to
 * hook various APIs to manipulate or inspect behavior.
 */

#ifndef COMMON_FNPTR_H
#define COMMON_FNPTR_H

#include <windows.h>

#ifndef DNS_QUERY_REQUEST_VERSION1

typedef struct _DNS_QUERY_REQUEST {
  ULONG   Version;
  PCWSTR  QueryName;
  WORD    QueryType;
  ULONG64 QueryOptions;
  PVOID   pDnsServerList;
  ULONG   InterfaceIndex;
  PVOID   pQueryCompletionCallback;
  PVOID   pQueryContext;
} DNS_QUERY_REQUEST, *PDNS_QUERY_REQUEST;

typedef struct _DNS_QUERY_RESULT {
  ULONG       Version;
  DNS_STATUS  QueryStatus;
  ULONG64     QueryOptions;
  PDNS_RECORD pQueryRecords;
  PVOID       Reserved;
} DNS_QUERY_RESULT, *PDNS_QUERY_RESULT;

typedef struct _DNS_QUERY_CANCEL {
  CHAR Reserved[32];
} DNS_QUERY_CANCEL, *PDNS_QUERY_CANCEL;

#endif

// general
typedef BOOL (WINAPI *PFNDLLMAINPROC)(HMODULE, DWORD, PVOID);

// ws2_32.dll
typedef int (STDCALL *PFNCONNECTPROC)(SOCKET, const struct sockaddr *, int);
typedef BOOL (STDCALL *PFNCONNECTEXPROC)(SOCKET, const struct sockaddr *, int, PVOID, DWORD, LPDWORD, LPOVERLAPPED);
typedef int (STDCALL *PFNWSACONNECTPROC)(SOCKET, const struct sockaddr *, int, LPWSABUF, LPWSABUF, LPQOS, LPQOS);
typedef WORD (WSAAPI *PFNHTONSPROC)(WORD);
typedef INT (WSAAPI *PFNGETADDRINFO)(PCSTR, PCSTR, const ADDRINFOA *, PADDRINFOA *);
typedef VOID (WSAAPI *PFNFREEADDRINFO)(PADDRINFOA);

// dnsapi.dll
typedef DNS_STATUS (STDCALL *PFNDNSQUERYEXPROC)(PDNS_QUERY_REQUEST pQueryRequest, PDNS_QUERY_RESULT pQueryResults, PDNS_QUERY_CANCEL pCancelHandle);

// advapi32.dll
typedef BOOL (STDCALL *PFNCRYPTDECRYPTPROC)(HCRYPTKEY, HCRYPTHASH, BOOL, DWORD, BYTE *, DWORD *);
typedef BOOL (STDCALL *PFNCRYPTGETHASHPARAMPROC)(HCRYPTHASH, DWORD, BYTE*, DWORD*, DWORD);
typedef BOOL (STDCALL *PFNCRYPTVERIFYSIGNATUREAPROC)(HCRYPTHASH, CONST BYTE *, DWORD, HCRYPTKEY, LPCSTR, DWORD);
typedef BOOL (STDCALL *PFNCRYPTIMPORTKEYPROC)(HCRYPTPROV, CONST BYTE *, DWORD, HCRYPTKEY, DWORD, HCRYPTKEY *);

// user32.dll
typedef int (STDCALL *PFNMESSAGEBOXAPROC)(HWND, LPCSTR, LPCSTR, UINT);
typedef HWND (STDCALL *PFNCREATEWINDOWEXAPROC)(DWORD, LPCSTR, LPCSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, LPVOID);
typedef LRESULT (STDCALL *PFNSENDMESSAGEPROC)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
typedef int (STDCALL *PFNMESSAGEBOXAPROC)(HWND, LPCSTR, LPCSTR, UINT);
typedef BOOL (STDCALL *PFNPEEKMESSAGEAPROC)(LPMSG, HWND, UINT, UINT, UINT);
typedef BOOL (STDCALL *PFNGETMESSAGEAPROC)(LPMSG, HWND, UINT, UINT);
typedef UINT_PTR (STDCALL *PFNSETTIMERPROC)(HWND, UINT_PTR, UINT, TIMERPROC);

// kernel32.dll
typedef HMODULE (STDCALL *PFNLOADLIBRARYAPROC)(LPCSTR);
typedef FARPROC (STDCALL *PFNGETPROCADDRESSPROC)(HMODULE, LPCSTR);
typedef DWORD (STDCALL *PFNGETENVIRONMENTVARIABLEAPROC)(LPCSTR, LPSTR, DWORD);
typedef BOOL (STDCALL *PFNCREATEPROCESSAPROC)(LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION);
typedef BOOL (STDCALL *PFNISWOW64PROCESSPROC) (HANDLE, PBOOL);
typedef HANDLE (STDCALL *PFNCREATEFILEAPROC)(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);
typedef HANDLE (STDCALL *PFNCREATEFILEMAPPINGAPROC)(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCSTR);
typedef HANDLE (STDCALL *PFNOPENMUTEXAPROC)(DWORD, BOOL, LPCSTR);
typedef VOID (STDCALL *PFNEXITPROCESSPROC)(UINT);
typedef HANDLE (STDCALL *PFNCREATEMUTEXAPROC)(LPSECURITY_ATTRIBUTES, BOOL, LPCSTR);
typedef DWORD (STDCALL *PFNGETCURRENTTHREADIDPROC)();
typedef VOID (STDCALL *PFNSLEEPPROC)(DWORD);
typedef DWORD (STDCALL *PFNSLEEPEXPROC)(DWORD, BOOL);
typedef DWORD (STDCALL *PFNWAITFORSINGLEOBJECTPROC)(HANDLE, DWORD);
typedef HANDLE (STDCALL *PFNOPENEVENTAPROC)(DWORD, BOOL, LPCSTR);
typedef HANDLE (STDCALL *PFNCREATEEVENTAPROC)(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName);
typedef BOOL (STDCALL *PFNGETEXITCODEPROCESSPROC)(HANDLE hProcess, LPDWORD lpExitCode);

// ntdll.dll
typedef NTSTATUS (NTAPI *PFNNTQUERYINFORMATIONPROCESSPROC)(HANDLE, DWORD, PVOID, ULONG, PULONG);
typedef NTSTATUS (NTAPI *PFNZWTERMINATEPROCESSPROC)(HANDLE, NTSTATUS);
typedef DWORD (STDCALL *PFNRTLEXITUSERPROCESSPROC)(NTSTATUS ExitStatus);
typedef LONG (NTAPI *PFNNTSUSPENDPROCESSPROC)(IN HANDLE ProcessHandle);

// wininet.dll
typedef void (STDCALL *PFNINTERNETCONNECTAPROC)(HINTERNET, LPCSTR, INTERNET_PORT, LPCSTR, LPCSTR, DWORD, DWORD, DWORD_PTR);
typedef HINTERNET (STDCALL *PFNINTERNETOPENURLAPROC)(HINTERNET, LPCSTR, LPCSTR, DWORD, DWORD, DWORD_PTR);

// winmm.dll
typedef DWORD (STDCALL *PFNTIMEGETTIMEPROC)();

#endif
